import { rulesType, ruleType } from "./types"

export const sleep = (time: number) => new Promise((res) => setTimeout(res, time, "done sleeping"))

export const isCorrectOffer = (text: string): boolean => {
  return (
    text.includes("ุนููุฉ") &&
    text.includes("ูููุฉ") &&
    text.includes("ุณุนุฑ") &&
    text.includes("ุฏูุน") &&
    (text.startsWith("๐ข") || text.startsWith("๐ด"))
  )
}

export const isIncludesReserve = (text: string): boolean => {
  return (
    text.includes("ุญุฌุฒ") ||
    text.includes("ูุญุฌูุฒ") ||
    text.toUpperCase().includes("HJZ") ||
    text.toUpperCase().includes("HJAZ") ||
    text.toUpperCase().includes("HAZJ")
  )
}

export const isIncludesTrust = (text: string): boolean => {
  return (
    text.includes("ุชูุซูู") || text.includes("ููุซู") || text.includes("ูุซู") || text.includes("ุซูุฉ")
  )
}

export const botReplyGenerator = (rulesBrokenFiltered: ruleType[]): string => {
  return `โผ๏ธ ุณูู ูุชู ุญุฐู ุฑุณุงูุชู ุจุนุฏ ุซูุงูู ูุงูู ุฎุงููุช (${
    rulesBrokenFiltered.length
  }) ุงูููุงููู ุงูุชุงููุฉ:

${rulesBrokenFiltered.map((rule) => rule.content).join("\n\n")}

<i>- ูุฃู ุงุณุชูุณุงุฑุงุช ุงูุธู ููุฌููุนุฉ ุงูุชูุซูู ูุงูููุงุดุงุช: https://t.me/+1dS6r91r0hYzZWZk</i>`
}

export const usernameRule = `โ ูุถุน ุงูุงุณู ูุงูููุจ ูุงูููุฒุฑููู (ุงููุนุฑู).`

export const askTrustRule = `โ ุงูุชูุซููุงุช ุชููู ูู ูุฌููุนุฉ ุงูุชูุซูู ูุงูููุงุดุงุช: https://t.me/+1dS6r91r0hYzZWZk`

export const reserveRule = `โ ูุฌุจ ุฃู ูููู ุงูุญุฌุฒ ุฑุฏูุง ุนูู ุงูุนุฑุถ ููุณู.`

export const formatRule = `โ ุงุญุชุฑุงู ุงููููุฐุฌ (ุงุถุบุท ุนูู ุงููุต ๐ ููุณุฎู):
<code>
๐ข ุดุฑุงุก / ๐ด ุจูุน
โถโ ุงุณู ุงูุนููุฉ: 
โทโ ุงููููุฉ: 
โธโ ุงูุณุนุฑ: 
โโ ุทุฑู ุงูุฏูุน: 
ุงูููุงุญุธุฉ: </code>`
